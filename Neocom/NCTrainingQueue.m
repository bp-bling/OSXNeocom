//
//  NCTrainingQueue.m
//  Neocom
//
//  Created by Артем Шиманский on 15.01.14.
//  Copyright (c) 2014 Artem Shimanski. All rights reserved.
//

#import "NCTrainingQueue.h"
#import <EVEAPI/EVEAPI.h>
#import "NCAccount.h"
#import "NCCharacterAttributes.h"
//#import "NCCharacterAttributes.h"

@interface NCTrainingQueue()<NSXMLParserDelegate> {
	NSMutableArray* _skills;
	NSString* _skillPlanName;
}
@property (nonatomic, strong, readwrite) NSManagedObjectContext* databaseManagedObjectContext;

- (void) _addRequiredSkillsForType:(NCDBInvType*) type;
- (void) _addSkill:(NCDBInvType*) skill withLevel:(int32_t) level;
- (void) _addMastery:(NCDBCertMastery*) mastery;
- (NSIndexSet*) _removeSkill:(NCSkillData*) skill;


@end

@implementation NCTrainingQueue
@synthesize skills = _skills;

- (id) init {
	if (self = [super init]) {
		self.characterAttributes = [NCCharacterAttributes defaultCharacterAttributes];
		_skills = [NSMutableArray new];
	}
	return self;
}

- (id) initWithCharacterSheet:(EVECharacterSheet*) characterSheet {
	if (self = [super init]) {
		self.characterSheet = characterSheet;
		self.characterAttributes = [[NCCharacterAttributes alloc] initWithCharacterSheet:characterSheet];
		self.databaseManagedObjectContext = [[NCDatabase sharedDatabase] managedObjectContext];
		_skills = [NSMutableArray new];
	}
	return self;
}

- (id) initWithCharacterSheet:(EVECharacterSheet*) characterSheet xmlData:(NSData*) data skillPlanName:(NSString**) skillPlanName {
	if (self = [self initWithCharacterSheet:characterSheet]) {
		NSXMLParser* parser = [[NSXMLParser alloc] initWithData:data];
		parser.delegate = self;
		[parser parse];
		if (skillPlanName)
			*skillPlanName = _skillPlanName;
	}
	return self;
}

- (void) setSkills:(NSArray *)skills {
	_skills = [[NSMutableArray alloc] initWithArray:skills copyItems:YES];
	for (NCSkillData* skillData in self.skills)
		skillData.characterSkill = self.characterSheet.skillsMap[@(skillData.typeID)];
}

- (void) addRequiredSkillsForType:(NCDBInvType*) type {
	[self.databaseManagedObjectContext performBlockAndWait:^{
		if (type.managedObjectContext != self.databaseManagedObjectContext)
			[self _addRequiredSkillsForType:(NCDBInvType*) [self.databaseManagedObjectContext existingObjectWithID:type.objectID error:nil]];
		else
			[self _addRequiredSkillsForType:type];
	}];
}

- (void) addSkill:(NCDBInvType*) skill withLevel:(int32_t) level {
	[self.databaseManagedObjectContext performBlockAndWait:^{
		if (skill.managedObjectContext != self.databaseManagedObjectContext)
			[self _addSkill:(NCDBInvType*) [self.databaseManagedObjectContext existingObjectWithID:skill.objectID error:nil] withLevel:level];
		else
			[self _addSkill:skill withLevel:level];
	}];
}

- (NSIndexSet*) removeSkill:(NCSkillData*) skill {
	__block NSIndexSet* indexes;
	[self.databaseManagedObjectContext performBlockAndWait:^{
		indexes = [self _removeSkill:skill];
	}];
	return indexes;
}

- (void) addMastery:(NCDBCertMastery*) mastery {
	[self.databaseManagedObjectContext performBlockAndWait:^{
		if (mastery.managedObjectContext != self.databaseManagedObjectContext)
			[self _addMastery:(NCDBCertMastery*) [self.databaseManagedObjectContext existingObjectWithID:mastery.objectID error:nil]];
		else
			[self _addMastery:mastery];
	}];
}

- (NSTimeInterval) trainingTime {
	return [self trainingTimeWithCharacterAttributes:self.characterAttributes];
}

- (NSString*) xmlRepresentationWithSkillPlanName:(NSString*) skillPlanName {
	NSMutableString* xml = [NSMutableString new];
	[xml appendString:@"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"];
	[xml appendFormat:@"<plan xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" name=\"%@\" revision=\"2798\">\n", skillPlanName];

	[self.databaseManagedObjectContext performBlockAndWait:^{
		for (NCSkillData* skill in self.skills) {
			NCDBInvType* type = [self.databaseManagedObjectContext invTypeWithTypeID:skill.typeID];
			[xml appendFormat:@"<entry skillID=\"%d\" skill=\"%@\" level=\"%d\" priority=\"1\" type=\"Planned\"/>\n", skill.typeID, type.typeName, skill.targetLevel];
		}
	}];
	
	[xml appendString:@"</plan>\n<!-- Generated by Neocom https://itunes.apple.com/us/app/neocom/id418895101?mt=8 -->"];
	return xml;
}

- (NSTimeInterval) trainingTimeWithCharacterAttributes:(NCCharacterAttributes*) characterAttributes {
	__block NSTimeInterval trainingTime = 0;
	[self.databaseManagedObjectContext performBlockAndWait:^{
		for (NCSkillData *skill in self.skills) {
			if (skill.currentLevel < skill.targetLevel)
				trainingTime += [skill trainingTimeToLevelUpWithCharacterAttributes:characterAttributes];
		}
	}];
	
	return trainingTime;
}

- (void) setCharacterSheet:(EVECharacterSheet *)characterSheet {
	_characterSheet = characterSheet;
	[self.skills setValue:nil forKey:@"characterSkill"];
	
	for (NCSkillData* skillData in self.skills)
		skillData.characterSkill = characterSheet.skillsMap[@(skillData.typeID)];
}

- (void) moveSkillAdIndex:(NSInteger) from toIndex:(NSInteger) to {
	NCSkillData* skill = _skills[from];
	[_skills removeObjectAtIndex:from];
	[_skills insertObject:skill atIndex:to];
}

#pragma mark - NSCopying

- (id)copyWithZone:(NSZone *)zone {
	NCTrainingQueue* trainingQueue = [[self.class allocWithZone:zone] init];
	trainingQueue.characterSheet = self.characterSheet;
	trainingQueue.characterAttributes = self.characterAttributes;
	trainingQueue.skills = self.skills;
	trainingQueue.databaseManagedObjectContext = self.databaseManagedObjectContext;
	return trainingQueue;
}

#pragma mark - NSXMLParserDelegate

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qualifiedName attributes:(NSDictionary *)attributeDict {
	if ([elementName isEqualToString:@"entry"]) {
		int32_t typeID = [attributeDict[@"skillID"] intValue];
		int32_t level = [attributeDict[@"level"] intValue];
		NCDBInvType* skill = [self.databaseManagedObjectContext invTypeWithTypeID:typeID];
		if (skill)
			[self addSkill:skill withLevel:level];
	}
	else if ([elementName isEqualToString:@"plan"]) {
		_skillPlanName = [attributeDict valueForKey:@"name"];
	}
}

#pragma mark - Private

- (void) _addRequiredSkillsForType:(NCDBInvType*) type {
	for (NCDBInvTypeRequiredSkill* skill in type.requiredSkills)
		[self _addSkill:skill.skillType withLevel:skill.skillLevel];
}

- (void) _addSkill:(NCDBInvType*) skill withLevel:(int32_t) level {
	EVECharacterSheetSkill *characterSkill = self.characterSheet.skillsMap[@(skill.typeID)];
	if (characterSkill.level >= level)
		return;
	
	BOOL addedDependence = NO;
	for (int32_t skillLevel = characterSkill.level + 1; skillLevel <= level; skillLevel++) {
		BOOL isExist = NO;
		for (NCSkillData *item in self.skills) {
			if (item.typeID == skill.typeID && item.targetLevel == skillLevel) {
				isExist = YES;
				break;
			}
		}
		if (!isExist) {
			if (!addedDependence) {
				[self _addRequiredSkillsForType:skill];
				addedDependence = YES;
			}
			NCSkillData* skillData = [[NCSkillData alloc] initWithInvType:skill];
			skillData.targetLevel = skillLevel;
			skillData.currentLevel = skillLevel - 1;
			skillData.characterAttributes = self.characterAttributes;
			skillData.characterSkill = characterSkill;
			[_skills addObject:skillData];
		}
	}
}

- (NSIndexSet*) _removeSkill:(NCSkillData*) skill {
	int32_t typeID = skill.typeID;
//	if (skill.type.managedObjectContext != self.databaseManagedObjectContext)
//		typeID = [(NCDBInvType*) [self.databaseManagedObjectContext objectWithID:skill.type.objectID] typeID];
//	else
//		typeID = skill.type.typeID;
	
	NSInteger level = skill.targetLevel;
	NSInteger index = 0;
	NSMutableIndexSet* indexes = [NSMutableIndexSet indexSet];
	for (NCSkillData* skillData in self.skills) {
		if (skillData.typeID == typeID && skillData.targetLevel >= level)
			[indexes addIndex:index];
		index++;
	}
	[_skills removeObjectsAtIndexes:indexes];
	return indexes;
}

- (void) _addMastery:(NCDBCertMastery*) mastery {
	for (NCDBCertSkill* skill in mastery.skills) {
		[self _addSkill:skill.type withLevel:skill.skillLevel];
	}
}

@end
